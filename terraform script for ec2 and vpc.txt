provider "aws" {
  region = "ap-south-1" // Replace with your desired AWS region
}

resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16" // Customize CIDR block as needed
   tags = {
    Name = "Debashis_vpc" // Specify the name you want for your subnet
  }
}
resource "aws_key_pair" "Demo_key_pair" {
  key_name   = "Demo-key-pair" // Specify the name for your key pair
  public_key = file("~/.ssh/id_rsa.pub") // Path to your public key file
}
resource "aws_subnet" "my_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.1.0/24" // Customize CIDR block as needed
   tags = {
    Name = "Debshis_subnet" // Specify the name you want for your subnet
  }
}
resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id
}
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }
}

resource "aws_security_group" "my_sg" {
  vpc_id = aws_vpc.my_vpc.id

  // Add inbound rules as per your requirements, for example:
  // SSH access
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  // Add other inbound/outbound  rules as needed
  // Outbound rules
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1" // Allow all protocols
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "Web_Sg"
  }
}


resource "aws_instance" "Custom_EC2Instance" {
  ami                    = "ami-05295b6e6c790593e"
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.my_subnet.id
  associate_public_ip_address = true
  security_groups        = [aws_security_group.my_sg.id]  
  

  // Add other necessary configurations like key_name, user_data, etc.

  tags = {
    Name = "Custom_EC2Instance"
    Environment = "Development"
  }
}



